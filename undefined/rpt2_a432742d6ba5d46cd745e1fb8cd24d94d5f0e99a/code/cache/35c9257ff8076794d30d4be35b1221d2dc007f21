{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html, property } from 'lit-element';\r\n//import 'moment/min/locales';\r\nimport '@material/mwc-linear-progress';\r\nimport { DateTime } from \"luxon\";\r\nimport Info from 'luxon/src/info.js';\r\n//import moment from 'moment';\r\nimport './index-editor';\r\nimport { CARD_VERSION } from './const';\r\nimport { localize } from './localize/localize';\r\nimport defaultConfig from './defaults';\r\nclass AtomicCalendarRevive extends LitElement {\r\n    constructor() {\r\n        super();\r\n        this.lastCalendarUpdateTime;\r\n        this.lastEventsUpdateTime;\r\n        this.lastHTMLUpdateTime;\r\n        this.events;\r\n        this.content = html ``;\r\n        this.shouldUpdateHtml = true;\r\n        this.errorMessage = html ``;\r\n        this.modeToggle = '';\r\n        this.selectedMonth = DateTime.now();\r\n        this.refreshCalEvents = true;\r\n        this.monthToGet = DateTime.now().toFormat('MM');\r\n        this.month = [];\r\n        this.showLoader = false;\r\n        this.eventSummary = html `&nbsp;`;\r\n        this.firstrun = true;\r\n        this.isUpdating = false;\r\n        this.language = '';\r\n        this.hiddenEvents = 0;\r\n    }\r\n    static async getConfigElement() {\r\n        return document.createElement('atomic-calendar-revive-editor');\r\n    }\r\n    static getStubConfig() {\r\n        return {\r\n            name: 'Calendar Card',\r\n            enableModeChange: true,\r\n        };\r\n    }\r\n    setConfig(config) {\r\n        if (!config) {\r\n            throw new Error(localize('errors.invalid_configuration'));\r\n        }\r\n        if (!config.entities) {\r\n            throw new Error(localize('errors.no_entities'));\r\n        }\r\n        const customConfig = JSON.parse(JSON.stringify(config));\r\n        this._config = Object.assign(Object.assign({}, defaultConfig), customConfig);\r\n        this.modeToggle = this._config.defaultMode;\r\n        if (typeof this._config.entities === 'string')\r\n            this._config.entities = [\r\n                {\r\n                    entity: config.entities,\r\n                },\r\n            ];\r\n        this._config.entities.forEach((entity, i) => {\r\n            if (typeof entity === 'string')\r\n                this._config.entities[i] = {\r\n                    entity: entity,\r\n                };\r\n        });\r\n    }\r\n    render() {\r\n        if (this.firstrun) {\r\n            console.info(`%c atomic-calendar-revive %c ${localize('common.version')}: ${CARD_VERSION} `, 'color: white; background: #484848; font-weight: 700;', 'color: white; background: #cc5500; font-weight: 700;');\r\n        }\r\n        if (!this._config || !this.hass) {\r\n            return html ``;\r\n        }\r\n        this.updateCard();\r\n        return html `${this.setStyle()}\n\n\t\t\t<ha-card class=\"cal-card\">\n\t\t\t\t${this._config.name || this._config.showDate || (this.showLoader && this._config.showLoader)\r\n            ? html ` <div class=\"cal-nameContainer\">\n\t\t\t\t\t\t\t${this._config.name\r\n                ? html `<div class=\"cal-name\" @click=\"${() => this.handleToggle()}\">${this._config.name}</div>`\r\n                : ''}\n\t\t\t\t\t\t\t${this.showLoader && this._config.showLoader ? html `<div class=\"loader\"></div>` : ''}\n\t\t\t\t\t\t\t${this._config.showDate ? html `<div class=\"calDate\">${this.getDate()}</div>` : ''}\n\t\t\t\t\t  </div>`\r\n            : ''}\n\n\t\t\t\t<div class=\"cal-eventContainer\" style=\"padding-top: 4px;\">${this.content}</div>\n\t\t\t</ha-card>`;\r\n    }\r\n    async updateCard() {\r\n        this.language =\r\n            typeof this._config.language != 'undefined' ? this._config.language : this.hass.language.toLowerCase();\r\n        //let timeFormat = moment.localeData(this.language).longDateFormat('LT');\r\n        //if (this._config.hoursFormat == '12h') timeFormat = 'h:mm A';\r\n        //else if (this._config.hoursFormat == '24h') timeFormat = 'H:mm';\r\n        //else if (this._config.hoursFormat != 'default') timeFormat = this._config.hoursFormat!;\r\n        /*moment.updateLocale(this.language, {\r\n            week: {\r\n                dow: this._config.firstDayOfWeek!,\r\n            },\r\n            longDateFormat: {\r\n                LT: timeFormat,\r\n                LTS: 'HH:mm:ss',\r\n                L: 'DD/MM/YYYY',\r\n                LL: 'D MMMM YYYY',\r\n                LLL: 'MMM D YYYY HH:mm',\r\n                LLLL: 'dddd, D MMMM YYYY HH:mm',\r\n            },\r\n        });*/\r\n        this.firstrun = false;\r\n        // check if an update is needed\r\n        if (!this.isUpdating && this.modeToggle == 'Event') {\r\n            if (!this.lastEventsUpdateTime ||\r\n                DateTime.now().diff(DateTime.fromISO(this.lastEventsUpdateTime)).seconds > this._config.refreshInterval) {\r\n                this.showLoader = true;\r\n                this.hiddenEvents = 0;\r\n                this.isUpdating = true;\r\n                try {\r\n                    this.events = await this.getEvents();\r\n                }\r\n                catch (error) {\r\n                    console.log(error);\r\n                    this.errorMessage = html ` ${localize('errors.update_card')}  <a href='https://marksie1988.github.io/atomic-calendar-revive/faq.html' target='${this._config.linkTarget}'>See Here</a>`;\r\n                    this.showLoader = false;\r\n                }\r\n                this.lastEventsUpdateTime = DateTime.now();\r\n                this.updateEventsHTML(this.events);\r\n                this.isUpdating = false;\r\n                this.showLoader = false;\r\n            }\r\n        }\r\n        if (this.modeToggle == 'Event')\r\n            this.updateEventsHTML(this.events);\r\n        else\r\n            this.updateCalendarHTML();\r\n    }\r\n    handleToggle() {\r\n        if (this._config.enableModeChange) {\r\n            this.modeToggle == 'Event' ? (this.modeToggle = 'Calendar') : (this.modeToggle = 'Event');\r\n            this.requestUpdate();\r\n        }\r\n    }\r\n    getDate() {\r\n        const date = DateTime.now().toFormat(this._config.dateFormat);\r\n        return html `${date}`;\r\n    }\r\n    getEventDate() {\r\n        const date = DateTime.now().toFormat(this._config.eventDateFormat);\r\n        return html `${date}`;\r\n    }\r\n    setStyle() {\r\n        return html `\n\t\t\t<style>\n\t\t\t\t.cal-card {\n\t\t\t\t\tcursor: default;\n\t\t\t\t\tpadding: 16px;\n\t\t\t\t}\n\n\t\t\t\t.cal-name {\n\t\t\t\t\tfont-size: var(--paper-font-headline_-_font-size);\n\t\t\t\t\tcolor: ${this._config.nameColor};\n\t\t\t\t\tpadding: 4px 8px 12px 0px;\n\t\t\t\t\tline-height: 40px;\n\t\t\t\t\tcursor: default;\n\t\t\t\t\tfloat: left;\n\t\t\t\t}\n\n\t\t\t\t.cal-nameContainer {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tflex-direction: row;\n\t\t\t\t\tjustify-content: space-between;\n\t\t\t\t\tvertical-align: middle;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tmargin: 0 8px 0 2px;\n\t\t\t\t}\n\n\t\t\t\t.calDate {\n\t\t\t\t\tfont-size: var(--paper-font-headline_-_font-size);\n\t\t\t\t\tfont-size: 1.3rem;\n\t\t\t\t\tfont-weight: 400;\n\t\t\t\t\tcolor: var(--primary-text-color);\n\t\t\t\t\tpadding: 4px 8px 12px 0px;\n\t\t\t\t\tline-height: 40px;\n\t\t\t\t\tcursor: default;\n\t\t\t\t\tfloat: right;\n\t\t\t\t\topacity: 0.75;\n\t\t\t\t}\n\n\t\t\t\ttable {\n\t\t\t\t\tcolor: black;\n\t\t\t\t\tmargin-left: 0px;\n\t\t\t\t\tmargin-right: 0px;\n\t\t\t\t\tborder-spacing: 10px 5px;\n\t\t\t\t\tborder-collapse: collapse;\n\t\t\t\t}\n\n\t\t\t\ttd {\n\t\t\t\t\tpadding: 4px 0 4px 0;\n\t\t\t\t}\n\n\t\t\t\t.daywrap {\n\t\t\t\t\tpadding: 2px 0 4px 0;\n\t\t\t\t\tborder-top: 1px solid;\n\t\t\t\t}\n\n\t\t\t\ttr {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t}\n\n\t\t\t\t.event-left {\n\t\t\t\t\tpadding: 4px 10px 3px 8px;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tvertical-align: top;\n\t\t\t\t}\n\n\t\t\t\t.event-leftCurrentDay {\n\t\t\t\t\twidth: 40px;\n\t\t\t\t}\n\n\t\t\t\t.daywrap > td {\n\t\t\t\t\tpadding-top: 8px;\n\t\t\t\t}\n\n\t\t\t\t.event-right {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tjustify-content: space-between;\n\t\t\t\t\tpadding: 0px 5px 0 5px;\n\t\t\t\t}\n\n\t\t\t\t.event-description {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tjustify-content: space-between;\n\t\t\t\t\tpadding: 0px 5px 0 5px;\n\t\t\t\t\tcolor: ${this._config.descColor};\n\t\t\t\t\tfont-size: ${this._config.descSize}%;\n\t\t\t\t}\n\t\t\t\t.hidden-events {\n\t\t\t\t\tcolor: var(--primary-text-color);\n\t\t\t\t}\n\n\t\t\t\t.hoursHTML {\n\t\t\t\t\tcolor: ${this._config.timeColor};\n\t\t\t\t\tfont-size: ${this._config.timeSize}% !important;\n\t\t\t\t\tfloat: left;\n\t\t\t\t}\n\n\t\t\t\t.relativeTime {\n\t\t\t\t\tcolor: ${this._config.timeColor};\n\t\t\t\t\tfont-size: ${this._config.timeSize}% !important;\n\t\t\t\t\tfloat: right;\n\t\t\t\t\tpadding-left: 5px;\n\t\t\t\t}\n\n\t\t\t\t.event-main {\n\t\t\t\t\tflex-direction: row nowrap;\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\tvertical-align: top;\n\t\t\t\t}\n\n\t\t\t\t.event-location {\n\t\t\t\t\ttext-align: right;\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\tvertical-align: top;\n\t\t\t\t}\n\n\t\t\t\t.event-title {\n\t\t\t\t\tfont-size: ${this._config.eventTitleSize}%;\n\t\t\t\t}\n\n\t\t\t\t.event-titleRunning {\n\t\t\t\t\tfont-size: ${this._config.eventTitleSize}%;\n\t\t\t\t}\n\n\t\t\t\t.event-location-icon {\n\t\t\t\t\t--mdc-icon-size: 15px;\n\t\t\t\t\tcolor: ${this._config.locationIconColor};\n\t\t\t\t\theight: 15px;\n\t\t\t\t\twidth: 15px;\n\t\t\t\t\tmargin-top: -2px;\n\t\t\t\t}\n\n\t\t\t\t.location-link {\n\t\t\t\t\ttext-decoration: none;\n\t\t\t\t\tcolor: ${this._config.locationLinkColor};\n\t\t\t\t\tfont-size: ${this._config.locationTextSize}%;\n\t\t\t\t}\n\n\t\t\t\t.event-circle {\n\t\t\t\t\twidth: 10px;\n\t\t\t\t\theight: 10px;\n\t\t\t\t\tmargin-left: -2px;\n\t\t\t\t}\n\n\t\t\t\thr.event {\n\t\t\t\t\tcolor: ${this._config.eventBarColor};\n\t\t\t\t\tmargin: -8px 0px 2px 0px;\n\t\t\t\t\tborder-width: 1px 0 0 0;\n\t\t\t\t}\n\n\t\t\t\t.event-cal-name {\n\t\t\t\t\tcolor: ${this._config.eventCalNameColor};\n\t\t\t\t\tfont-size: ${this._config.eventCalNameSize}%;\n\t\t\t\t}\n\t\t\t\t.event-cal-name-icon {\n\t\t\t\t\t--mdc-icon-size: 15px;\n\t\t\t\t}\n\n\t\t\t\t.eventBar {\n\t\t\t\t\tmargin-top: -10px;\n\t\t\t\t\tmargin-bottom: 0px;\n\t\t\t\t}\n\n\t\t\t\t.progress-bar {\n\t\t\t\t\t--mdc-theme-primary: ${this._config.progressBarColor};\n\t\t\t\t\t--mdc-linear-progress-buffer-color: ${this._config.progressBarBufferColor};\n\t\t\t\t}\n\n\t\t\t\tmwc-linear-progress {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tmargin: auto;\n\t\t\t\t}\n\n\t\t\t\tha-button-toggle-group {\n\t\t\t\t\tcolor: var(--primary-color);\n\t\t\t\t}\n\n\t\t\t\t.calTitleContainer {\n\t\t\t\t\tpadding: 0px 8px 8px 8px;\n\t\t\t\t}\n\n\t\t\t\t.calIconSelector {\n\t\t\t\t\t--mdc-icon-button-size: var(--button-toggle-size, 48px);\n\t\t\t\t\t--mdc-icon-size: var(--button-toggle-icon-size, 24px);\n\t\t\t\t\tborder-radius: 4px 4px 4px 4px;\n\t\t\t\t\tborder: 1px solid var(--primary-color);\n\t\t\t\t\tfloat: right;\n\t\t\t\t\tdisplay: inline-flex;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t}\n\t\t\t\t.calDateSelector {\n\t\t\t\t\t--mdc-icon-button-size: var(--button-toggle-size, 48px);\n\t\t\t\t\t--mdc-icon-size: var(--button-toggle-icon-size, 24px);\n\t\t\t\t\tdisplay: inline-flex;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t}\n\t\t\t\tdiv.calIconSelector ha-icon-button,\n\t\t\t\tdiv.calDateSelector ha-icon-button {\n\t\t\t\t\tcolor: var(--primary-color);\n\t\t\t\t}\n\t\t\t\tdiv.calDateSelector .prev {\n\t\t\t\t\tborder: 1px solid var(--primary-color);\n\t\t\t\t\tborder-radius: 3px 0px 0px 3px;\n\t\t\t\t}\n\t\t\t\tdiv.calDateSelector .date {\n\t\t\t\t\tborder: 1px solid var(--primary-color);\n\t\t\t\t\tborder-radius: 0px 0px 0px 0px;\n\t\t\t\t\tpadding: 4px 2px 2px 4px;\n\t\t\t\t}\n\t\t\t\tdiv.calDateSelector .next {\n\t\t\t\t\tborder: 1px solid var(--primary-color);\n\t\t\t\t\tborder-radius: 0px 4px 4px 0px;\n\t\t\t\t}\n\n\t\t\t\tha-icon-button {\n\t\t\t\t\t--mdc-icon-size: 20px;\n\t\t\t\t\t--mdc-icon-button-size: 25px;\n\t\t\t\t\tcolor: ${this._config.calDateColor};\n\t\t\t\t}\n\n\t\t\t\ttable.cal {\n\t\t\t\t\tmargin-left: 0px;\n\t\t\t\t\tmargin-right: 0px;\n\t\t\t\t\tborder-spacing: 10px 5px;\n\t\t\t\t\tborder-collapse: collapse;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\ttable-layout: fixed;\n\t\t\t\t}\n\n\t\t\t\tthead th.cal {\n\t\t\t\t\tcolor: var(--secondary-text-color);\n\t\t\t\t\tborder: 1px solid ${this._config.calGridColor};\n\t\t\t\t\tfont-size: 11px;\n\t\t\t\t\tfont-weight: 400;\n\t\t\t\t\ttext-transform: uppercase;\n\t\t\t\t}\n\n\t\t\t\ttd.cal {\n\t\t\t\t\tpadding: 5px 5px 5px 5px;\n\t\t\t\t\tborder: 1px solid ${this._config.calGridColor};\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tvertical-align: middle;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tcolor: ${this._config.calDayColor};\n\t\t\t\t}\n\n\t\t\t\t.calDay {\n\t\t\t\t\theight: 38px;\n\t\t\t\t\tfont-size: 95%;\n\t\t\t\t\tmax-width: 38px;\n\t\t\t\t\tmargin: auto;\n\t\t\t\t}\n\n\t\t\t\t.calDay.currentDay {\n\t\t\t\t\theight: 20px;\n\t\t\t\t\tbackground-color: var(--primary-color);\n\t\t\t\t\tborder-radius: 50%;\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\twhite-space: nowrap;\n\t\t\t\t\twidth: max-content;\n\t\t\t\t\tmin-width: 20px;\n\t\t\t\t\tline-height: 140%;\n\t\t\t\t\tcolor: var(--text-primary-color) !important;\n\t\t\t\t}\n\n\t\t\t\ttr.cal {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t}\n\n\t\t\t\t.calTableContainer {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t}\n\n\t\t\t\t.summary-event-div {\n\t\t\t\t\tpadding-top: 3px;\n\t\t\t\t}\n\n\t\t\t\t.bullet-event-div-accepted {\n\t\t\t\t\t-webkit-border-radius: 8px;\n\t\t\t\t\tborder-radius: 8px;\n\t\t\t\t\tborder: 4px solid;\n\t\t\t\t\theight: 0;\n\t\t\t\t\twidth: 0;\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\tvertical-align: middle;\n\t\t\t\t}\n\n\t\t\t\t.bullet-event-div-declined {\n\t\t\t\t\t-webkit-border-radius: 8px;\n\t\t\t\t\tborder-radius: 8px;\n\t\t\t\t\tborder: 1px solid;\n\t\t\t\t\theight: 6px;\n\t\t\t\t\twidth: 6px;\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\tvertical-align: middle;\n\t\t\t\t}\n\n\t\t\t\t.bullet-event-span {\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t\twhite-space: nowrap;\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\tvertical-align: middle;\n\t\t\t\t\tmargin: 0 5px;\n\t\t\t\t\ttext-decoration: none !important;\n\t\t\t\t}\n\n\t\t\t\t.summary-fullday-div-accepted {\n\t\t\t\t\t-webkit-border-radius: 5px;\n\t\t\t\t\tborder-radius: 5px;\n\t\t\t\t\tborder: 2px solid;\n\t\t\t\t\tborder-left: 7px solid;\n\t\t\t\t\tpadding: 0 4px;\n\t\t\t\t\tmargin: 5px 0;\n\t\t\t\t\tline-height: 16px;\n\t\t\t\t}\n\n\t\t\t\t.summary-fullday-div-declined {\n\t\t\t\t\t-webkit-border-radius: 5px;\n\t\t\t\t\tborder-radius: 5px;\n\t\t\t\t\tborder: 1px solid;\n\t\t\t\t\tpadding: 0 4px;\n\t\t\t\t\tmargin: 5px 0;\n\t\t\t\t\theight: 18px;\n\t\t\t\t\tline-height: 16px;\n\t\t\t\t}\n\n\t\t\t\t.calDescription {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tjustify-content: space-between;\n\t\t\t\t\tpadding: 0px 5px 0 5px;\n\t\t\t\t\tcolor: ${this._config.descColor};\n\t\t\t\t\tfont-size: ${this._config.descSize}%;\n\t\t\t\t}\n\n\t\t\t\t.calMain {\n\t\t\t\t\tflex-direction: row nowrap;\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\tvertical-align: top;\n\t\t\t\t}\n\n\t\t\t\t.calIcon {\n\t\t\t\t\t--mdc-icon-size: 10px;\n\t\t\t\t\twidth: 10px;\n\t\t\t\t\theight: 10px;\n\t\t\t\t\tpadding-top: 0px;\n\t\t\t\t\tmargin-top: -10px;\n\t\t\t\t\tmargin-right: -1px;\n\t\t\t\t\tmargin-left: -1px;\n\t\t\t\t}\n\n\t\t\t\t.eventIcon {\n\t\t\t\t\t--mdc-icon-size: 15px !important;\n\t\t\t\t\tpadding-top: 0px;\n\t\t\t\t\tmargin-top: -10px;\n\t\t\t\t\tmargin-right: -1px;\n\t\t\t\t\tmargin-left: -1px;\n\t\t\t\t}\n\n\t\t\t\t.loader {\n\t\t\t\t\tborder: 4px solid #f3f3f3;\n\t\t\t\t\tborder-top: 4px solid grey;\n\t\t\t\t\tborder-radius: 50%;\n\t\t\t\t\twidth: 14px;\n\t\t\t\t\theight: 14px;\n\t\t\t\t\tanimation: spin 2s linear infinite;\n\t\t\t\t\tfloat: left;\n\t\t\t\t}\n\n\t\t\t\t@keyframes spin {\n\t\t\t\t\t0% {\n\t\t\t\t\t\ttransform: rotate(0deg);\n\t\t\t\t\t}\n\t\t\t\t\t100% {\n\t\t\t\t\t\ttransform: rotate(360deg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t</style>\n\t\t`;\r\n    }\r\n    // The height of your card. Home Assistant uses this to automatically\r\n    // distribute all cards over the available columns.\r\n    getCardSize() {\r\n        return this._config.entities.length + 1;\r\n    }\r\n    _toggle(state) {\r\n        this.hass.callService('homeassistant', 'toggle', {\r\n            entity_id: state.entity_id,\r\n        });\r\n    }\r\n    getEventIcon(event) {\r\n        const iconColor = typeof event._config.color != 'undefined' ? event._config.color : this._config.eventTitleColor;\r\n        if (this._config.showEventIcon && event._config.icon != 'undefined')\r\n            return html `<ha-icon class=\"eventIcon\" style=\"color: ${iconColor};\" icon=\"${event._config.icon}\"></ha-icon>`;\r\n    }\r\n    /**\r\n     * generate Event Title (summary) HTML\r\n     *\r\n     */\r\n    getTitleHTML(event) {\r\n        const titletext = event.title;\r\n        const titleColor = typeof event._config.color != 'undefined' ? event._config.color : this._config.eventTitleColor;\r\n        const dayClassEventRunning = event.isEventRunning ? `event-titleRunning` : `event-title`;\r\n        if (this._config.disableEventLink || event.link == 'undefined' || event.link === null)\r\n            return html `\n\t\t\t\t<div style=\"color: ${titleColor}\">\n\t\t\t\t\t<div class=\"${dayClassEventRunning}\">${this.getEventIcon(event)} ${titletext}</div>\n\t\t\t\t</div>\n\t\t\t`;\r\n        else\r\n            return html `\n\t\t\t\t<a href=\"${event.link}\" style=\"text-decoration: none;\" target=\"${this._config.linkTarget}\">\n\t\t\t\t\t<div style=\"color: ${titleColor}\">\n\t\t\t\t\t\t<div class=\"${dayClassEventRunning}\">${this.getEventIcon(event)} <span>${titletext}</span></div>\n\t\t\t\t\t</div>\n\t\t\t\t</a>\n\t\t\t`;\r\n    }\r\n    // generate Calendar title\r\n    getCalTitleHTML(event) {\r\n        const titleColor = typeof event._config.titleColor != 'undefined' ? event._config.titleColor : this._config.eventTitleColor;\r\n        const textDecoration = typeof event.attendees != 'undefined' &&\r\n            !!event.attendees.find((attendee) => attendee.self == true && attendee.responseStatus == 'declined')\r\n            ? 'line-through'\r\n            : 'none';\r\n        if (this._config.disableCalEventLink || event.htmlLink === null)\r\n            return html `${event.summary}`;\r\n        else\r\n            return html `<a\n\t\t\t\thref=\"${event.htmlLink}\"\n\t\t\t\tstyle=\"text-decoration: ${textDecoration};color: ${titleColor}\"\n\t\t\t\ttarget=\"${this._config.linkTarget}\"\n\t\t\t\t>${event.summary}\n\t\t\t</a>`;\r\n    }\r\n    // generate Calendar description\r\n    getCalDescHTML(event) {\r\n        if (event.description)\r\n            return html `<div class=\"calDescription\">- ${event.description}</div>`;\r\n    }\r\n    /**\r\n     * generate Hours HTML\r\n     *\r\n     */\r\n    getHoursHTML(event) {\r\n        const today = DateTime.now();\r\n        if (event.isEmpty)\r\n            return html `<div>&nbsp;</div>`;\r\n        // full day events, no hours set\r\n        // 1. Starts any day, ends later -> 'All day, end date'\r\n        if (event.isFullMoreDaysEvent && DateTime.fromISO(event.startTime).startOf('day') > today.startOf('day'))\r\n            return html `\n\t\t\t\t${this._config.fullDayEventText}, ${this._config.untilText.toLowerCase()}\n\t\t\t\t${this.getCurrDayAndMonth(DateTime.formISO(event.endTime))}\n\t\t\t`;\r\n        // 2 . Is full day event starting before today, ending after today\r\n        else if (event.isFullMoreDaysEvent &&\r\n            (DateTime.fromISO(event.startTime).startOf('day') < today.startOf('day') || DateTime.fromISO(event.endTime).startOf('day') > today.startOf('day')))\r\n            return html `\n\t\t\t\t${this._config.fullDayEventText}, ${this._config.untilText.toLowerCase()}\n\t\t\t\t${this.getCurrDayAndMonth(DateTime.fromISO(event.endTime))}\n\t\t\t`;\r\n        // 3. One day only, or multiple day ends today -> 'All day'\r\n        else if (event.isFullDayEvent)\r\n            return html `${this._config.fullDayEventText}`;\r\n        // 4. long term event, ends later -> 'until date'\r\n        else if (DateTime.fromISO(event.startTime).startOf('day') < today.startOf('day') && DateTime.fromISO(event.endTime).startOf('day') > today.startOf('day'))\r\n            return html `${this._config.untilText} ${this.getCurrDayAndMonth(DateTime.fromISO(event.endTime))}`;\r\n        // 5.long term event, ends today -> 'until hour'\r\n        else if (DateTime.fromISO(event.startTime).startOf('day') < today.startOf('day') && DateTime.fromISO(event.endTime).hasSame(today, 'day'))\r\n            return html `${this._config.untilText} ${event.endTime.toFormat('t')}`;\r\n        // 6. starts today or later, ends later -> 'hour - until date'\r\n        else if (!DateTime.fromISO(event.startTime).startOf('day') < today.startOf('day') && DateTime.fromISO(event.endTime).startOf('day') > DateTime.fromISO(event.startTime).startOf('day'))\r\n            return html `\n\t\t\t\t${event.startTime.toFormat('t')}, ${this._config.untilText.toLowerCase()}\n\t\t\t\t${this.getCurrDayAndMonth(DateTime.fromISO(event.endTime))}\n\t\t\t`;\r\n        // 7. Normal one day event, with time set -> 'hour - hour'\r\n        else\r\n            return html `${event.startTime.toFormat('t')} - ${event.endTime.toFormat('t')}`;\r\n    }\r\n    /**\r\n     * generate Event Relative Time HTML\r\n     *\r\n     */\r\n    getRelativeTime(event) {\r\n        const today = DateTime.now();\r\n        if (event.isEmpty)\r\n            return html ``;\r\n        else if (!DateTime.fromISO(event.startTime).startOf('day') < today.startOf('day'))\r\n            return html `(${today.toRelative({ base: DateTime.fromISO(event.startTime) })})`;\r\n    }\r\n    /**\r\n     * generate Event Location link HTML\r\n     *\r\n     */\r\n    getLocationHTML(event) {\r\n        if (!event.location || !this._config.showLocation) {\r\n            return html ``;\r\n        }\r\n        else if (this._config.disableLocationLink) {\r\n            return html `\n\t\t\t\t<div><ha-icon class=\"event-location-icon\" icon=\"mdi:map-marker\"></ha-icon>&nbsp;${event.address}</div>\n\t\t\t`;\r\n        }\r\n        else {\r\n            const loc = event.location;\r\n            const location = loc.startsWith('http') ? loc : 'https://maps.google.com/?q=' + loc;\r\n            return html `\n\t\t\t\t<div>\n\t\t\t\t\t<a href=${location} target=\"${this._config.linkTarget}\" class=\"location-link\">\n\t\t\t\t\t\t<ha-icon class=\"event-location-icon\" icon=\"mdi:map-marker\"></ha-icon>&nbsp;${event.address}\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t`;\r\n        }\r\n    }\r\n    getCalLocationHTML(event) {\r\n        if (!event.location || !this._config.showLocation || this._config.disableCalLocationLink) {\r\n            return html ``;\r\n        }\r\n        else {\r\n            const loc = event.location;\r\n            const location = loc.startsWith('http') ? loc : 'https://maps.google.com/?q=' + loc;\r\n            return html `\n\t\t\t\t<a href=${location} target=\"${this._config.linkTarget}\" class=\"location-link\">\n\t\t\t\t\t<ha-icon class=\"event-location-icon\" icon=\"mdi:map-marker\"></ha-icon>&nbsp;\n\t\t\t\t</a>\n\t\t\t`;\r\n        }\r\n    }\r\n    /**\r\n     * update Events main HTML\r\n     *\r\n     */\r\n    updateEventsHTML(days) {\r\n        let htmlDays = '';\r\n        // TODO some more tests end error message\r\n        if (!days) {\r\n            this.content = this.errorMessage;\r\n            return;\r\n        }\r\n        // TODO write something if no events\r\n        if (days.length === 0 && this._config.maxDaysToShow == 1) {\r\n            this.content = this._config.noEventsForTodayText;\r\n            return;\r\n        }\r\n        else if (days.length === 0) {\r\n            this.content = this._config.noEventsForNextDaysText;\r\n            return;\r\n        }\r\n        // move today's finished events up\r\n        if (DateTime.fromISO(days[0][0]).hasSame(DateTime.now(), 'day') && days[0].length > 1) {\r\n            let i = 1;\r\n            while (i < days[0].length) {\r\n                if (days[0][i].isEventFinished && !days[0][i - 1].isEventFinished) {\r\n                    [days[0][i], days[0][i - 1]] = [days[0][i - 1], days[0][i]];\r\n                    if (i > 1)\r\n                        i--;\r\n                }\r\n                else\r\n                    i++;\r\n            }\r\n        }\r\n        // check if no events for today and push a \"no events\" fake event\r\n        if (this._config.showNoEventsForToday &&\r\n            DateTime.fromISO(days[0][0].startTime).startOf('day') > DateTime.now().startOf('day') &&\r\n            days[0].length > 0) {\r\n            const emptyEv = {\r\n                eventClass: '',\r\n                config: '',\r\n                start: { dateTime: DateTime.now().endOf('day') },\r\n                end: { dateTime: DateTime.now().endOf('day') },\r\n                summary: this._config.noEventsForTodayText,\r\n                isFinished: false,\r\n                htmlLink: 'https://calendar.google.com/calendar/r/day?sf=true',\r\n            };\r\n            const emptyEvent = new EventClass(emptyEv, this._config, '');\r\n            emptyEvent.isEmpty = true;\r\n            const d = [];\r\n            d.push(emptyEvent);\r\n            days.unshift(d);\r\n        }\r\n        //loop through days\r\n        htmlDays = days.map((day, di) => {\r\n            //loop through events for each day\r\n            const htmlEvents = day.map((event, i, arr) => {\r\n                const dayWrap = i == 0 && di > 0 ? 'daywrap' : '';\r\n                const isEventNext = di == 0 &&\r\n                    DateTime.fromISO(event.startTime) > DateTime.now() &&\r\n                    (i == 0 || !DateTime.fromISO(arr[i - 1].startTime) > DateTime.now())\r\n                    ? true\r\n                    : false;\r\n                //show line before next event\r\n                const currentEventLine = this._config.showCurrentEventLine && isEventNext\r\n                    ? html `<div class=\"eventBar\">\n\t\t\t\t\t\t\t\t<ha-icon icon=\"mdi:circle\" class=\"event-circle\" style=\"color: ${this._config.eventBarColor};\"></ha-icon>\n\t\t\t\t\t\t\t\t<hr class=\"event\" />\n\t\t\t\t\t\t  </div>`\r\n                    : ``;\r\n                const calColor = typeof event._config.color != 'undefined' ? event._config.color : this._config.defaultCalColor;\r\n                //show calendar name\r\n                const eventCalName = event._config.eventCalName\r\n                    ? html `<div class=\"event-cal-name\" style=\"color: ${calColor};\">\n\t\t\t\t\t\t\t<ha-icon icon=\"mdi:calendar\" class=\"event-cal-name-icon\"></ha-icon>&nbsp;${event._config.eventCalName}\n\t\t\t\t\t  </div>`\r\n                    : ``;\r\n                //show current event progress bar\r\n                let progressBar = html ``;\r\n                if (di == 0 &&\r\n                    ((event.isEventRunning && this._config.showFullDayProgress && event.isFullDayEvent) ||\r\n                        (event.isEventRunning && !event.isFullDayEvent && this._config.showProgressBar))) {\r\n                    const eventDuration = event.endTime.diff(event.startTime, 'minutes');\r\n                    const eventProgress = DateTime.now().diff(event.startTime).minutes;\r\n                    const eventPercentProgress = (eventProgress * 100) / eventDuration / 100;\r\n                    progressBar = html `<mwc-linear-progress\n\t\t\t\t\t\tclass=\"progress-bar\"\n\t\t\t\t\t\tdeterminate\n\t\t\t\t\t\tprogress=\"${eventPercentProgress}\"\n\t\t\t\t\t\tbuffer=\"1\"\n\t\t\t\t\t>\n\t\t\t\t\t</mwc-linear-progress>`;\r\n                }\r\n                const finishedEventsStyle = event.isEventFinished && this._config.dimFinishedEvents\r\n                    ? `opacity: ` + this._config.finishedEventOpacity + `; filter: ` + this._config.finishedEventFilter + `;`\r\n                    : ``;\r\n                // Show the hours\r\n                const hoursHTML = this._config.showHours ? html `<div class=\"hoursHTML\">${this.getHoursHTML(event)}</div>` : '';\r\n                // Show the relative time\r\n                const relativeTime = this._config.showRelativeTime\r\n                    ? html `<div class=\"relativeTime\">${this.getRelativeTime(event)}</div>`\r\n                    : '';\r\n                // Show the description\r\n                const descHTML = this._config.showDescription\r\n                    ? html `<div class=\"event-description\">${event.description}</div>`\r\n                    : '';\r\n                const lastEventStyle = i == arr.length - 1 ? 'padding-bottom: 8px;' : '';\r\n                // check and set the date format\r\n                const eventDateFormat = this._config.europeanDate == true\r\n                    ? html `${i === 0 ? event.startTimeToShow.toFormat('dd') + ' ' : ''}${i === 0 && this._config.showMonth\r\n                        ? event.startTimeToShow.toFormat('LLL')\r\n                        : ''}`\r\n                    : html `${i === 0 && this._config.showMonth ? event.startTimeToShow.toFormat('LLL') + ' ' : ''}${i === 0\r\n                        ? event.startTimeToShow.toFormat('dd')\r\n                        : ''}`;\r\n                const dayClassTodayEvent = DateTime.fromISO(event.startTime).hasSame(DateTime.now(), 'day') ? `event-leftCurrentDay` : ``;\r\n                return html ` <tr class=\"${dayWrap}\" style=\"color: ${this._config.dayWrapperLineColor};\">\n\t\t\t\t\t<td class=\"event-left\" style=\"color: ${this._config.dateColor};font-size: ${this._config.dateSize}%;\">\n\t\t\t\t\t\t<div class=${dayClassTodayEvent}>\n\t\t\t\t\t\t\t${i === 0 && this._config.showWeekDay ? event.startTimeToShow.toFormat('ccc') : ''}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=${dayClassTodayEvent}>${eventDateFormat}</div>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td style=\"width: 100%; ${finishedEventsStyle} ${lastEventStyle}\">\n\t\t\t\t\t\t<div>${currentEventLine}</div>\n\t\t\t\t\t\t<div class=\"event-right\">\n\t\t\t\t\t\t\t<div class=\"event-main\">${this.getTitleHTML(event)} ${hoursHTML} ${relativeTime}</div>\n\t\t\t\t\t\t\t<div class=\"event-location\">${this.getLocationHTML(event)} ${eventCalName}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"event-right\">\n\t\t\t\t\t\t\t<div class=\"event-main\">${descHTML}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t${progressBar}\n\t\t\t\t\t</td>\n\t\t\t\t</tr>`;\r\n            });\r\n            return htmlEvents;\r\n        });\r\n        const eventnotice = this._config.showHiddenText\r\n            ? this.hiddenEvents > 0\r\n                ? this.hiddenEvents + ' ' + this._config.hiddenEventText\r\n                : ''\r\n            : '';\r\n        this.content = html `<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t${htmlDays}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<span class=\"hidden-events\">${eventnotice}</span>`;\r\n    }\r\n    /**\r\n     * ready-to-use function to remove year from moment format('LL')\r\n     * @param {moment}\r\n     * @return {String} [month, day]\r\n     */\r\n    getCurrDayAndMonth(locale) {\r\n        const today = locale.toFormat('DDD');\r\n        return today\r\n            .replace(locale.toFormat('yyyy'), '') // remove year\r\n            .replace(/\\s\\s+/g, ' ') // remove double spaces, if any\r\n            .trim() // remove spaces from the start and the end\r\n            .replace(/[??]\\./, '') // remove year letter from RU/UK locales\r\n            .replace(/de$/, '') // remove year prefix from PT\r\n            .replace(/b\\.$/, '') // remove year prefix from SE\r\n            .trim() // remove spaces from the start and the end\r\n            .replace(/,$/g, ''); // remove comma from the end\r\n    }\r\n    /**\r\n     * check if string contains one of keywords\r\n     * @param {string} string to check inside\r\n     * @param {string} comma delimited keywords\r\n     * @return {bool}\r\n     */\r\n    checkFilter(str, filter) {\r\n        if (typeof filter != 'undefined' && filter != '') {\r\n            const keywords = filter.split(',');\r\n            return keywords.some((keyword) => {\r\n                if (RegExp('(?:^|\\\\s)' + keyword.trim(), 'i').test(str))\r\n                    return true;\r\n                else\r\n                    return false;\r\n            });\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    // if event is declined return false\r\n    checkDeclined(event) {\r\n        if (!event.attendees) {\r\n            return false;\r\n        }\r\n        return !!event.attendees.find((attendee) => attendee.self == true && attendee.responseStatus == 'declined');\r\n    }\r\n    // if a time filter is set and entry is between the times, return true\r\n    checkTimeFilter(event, startFilter, endFilter) {\r\n        if (!event.start.dateTime && !event.start.dateTime) {\r\n            return false;\r\n        }\r\n        return (DateTime.fromISO(event.start.dateTime).startOf('hour') > DateTime.fromISO(startFilter).startOf('hour') &&\r\n            DateTime.fromISO(event.start.dateTime).startOf('hour') < DateTime.fromISO(endFilter).startOf('hour'));\r\n    }\r\n    /**\r\n     * gets events from HA to Events mode\r\n     *\r\n     */\r\n    async getEvents() {\r\n        const daysToShow = this._config.maxDaysToShow == 0 ? this._config.maxDaysToShow : this._config.maxDaysToShow - 1;\r\n        const start = DateTime.now().plus({ days: this._config.startDaysAhead }).startOf('day').toFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\r\n        const end = DateTime.now().plus({ days: daysToShow + this._config.startDaysAhead }).endOf('day').toFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\r\n        const calendarUrlList = [];\r\n        this._config.entities.map((entity) => {\r\n            calendarUrlList.push(`calendars/${entity.entity}?start=${start}Z&end=${end}Z`);\r\n        });\r\n        try {\r\n            return await Promise.all(calendarUrlList.map((url) => this.hass.callApi('GET', url))).then((result) => {\r\n                const singleEvents = [];\r\n                let eventCount = 0;\r\n                result.map((calendar, i) => {\r\n                    calendar.map((singleEvent) => {\r\n                        const blacklist = typeof this._config.entities[i]['blacklist'] != 'undefined' ? this._config.entities[i]['blacklist'] : '';\r\n                        const whitelist = typeof this._config.entities[i]['whitelist'] != 'undefined' ? this._config.entities[i]['whitelist'] : '';\r\n                        const singleAPIEvent = new EventClass(singleEvent, this._config, this._config.entities[i]);\r\n                        const startTimeFilter = typeof this._config.entities[i]['startTimeFilter'] != 'undefined'\r\n                            ? this._config.entities[i]['startTimeFilter']\r\n                            : '';\r\n                        const endTimeFilter = typeof this._config.entities[i]['endTimeFilter'] != 'undefined'\r\n                            ? this._config.entities[i]['endTimeFilter']\r\n                            : '';\r\n                        if ((startTimeFilter == '' ||\r\n                            endTimeFilter == '' ||\r\n                            this.checkTimeFilter(singleEvent, DateTime.fromFormat(startTimeFilter, 'HH:mm').minus({ minutes: 1 }), DateTime.fromFormat(endTimeFilter, 'HH:mm').plus({ minutes: 1 }))) &&\r\n                            (blacklist == '' || !this.checkFilter(singleEvent.summary, blacklist)) &&\r\n                            (whitelist == '' || this.checkFilter(singleEvent.summary, whitelist)) &&\r\n                            (this._config.showPrivate || singleEvent.visibility != 'private') &&\r\n                            (this._config.showDeclined || !this.checkDeclined(singleEvent)) &&\r\n                            ((this._config.maxDaysToShow === 0 && singleAPIEvent.isEventRunning) ||\r\n                                !(this._config.hideFinishedEvents && singleAPIEvent.isEventFinished))) {\r\n                            singleEvents.push(singleAPIEvent);\r\n                            eventCount++;\r\n                        }\r\n                    });\r\n                });\r\n                if (this._config.sortByStartTime) {\r\n                    singleEvents.sort(function (a, b) {\r\n                        return DateTime.fromISO(a.startTime).diff(DateTime.fromISO(b.startTime));\r\n                    });\r\n                }\r\n                // Check maxEventCount and softLimit\r\n                if (this._config.maxEventCount) {\r\n                    if ((!this._config.softLimit && this._config.maxEventCount < singleEvents.length) ||\r\n                        (this._config.softLimit && singleEvents.length > this._config.maxEventCount + this._config.softLimit)) {\r\n                        this.hiddenEvents += singleEvents.length - this._config.maxEventCount;\r\n                        singleEvents.length = this._config.maxEventCount;\r\n                    }\r\n                }\r\n                const ev = [].concat(...singleEvents);\r\n                // grouping events by days, returns object with days and events\r\n                const groupsOfEvents = ev.reduce(function (r, a) {\r\n                    r[a.daysToSort] = r[a.daysToSort] || [];\r\n                    r[a.daysToSort].push(a);\r\n                    return r;\r\n                }, {});\r\n                const days = Object.keys(groupsOfEvents).map(function (k) {\r\n                    return groupsOfEvents[k];\r\n                });\r\n                this.showLoader = false;\r\n                return days;\r\n            });\r\n        }\r\n        catch (error) {\r\n            this.showLoader = false;\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * gets events from HA to Calendar mode\r\n     *\r\n     */\r\n    getCalendarEvents(startDay, endDay, monthToGet, month) {\r\n        this.refreshCalEvents = false;\r\n        const start = DateTime.fromISO(startDay).startOf('day').toFormat(\"YYYY-MM-DD'T'HH:mm:ss\");\r\n        const end = DateTime.fromISO(endDay).endOf('day').toFormat(\"YYYY-MM-DD'T'HH:mm:ss\");\r\n        // calendarUrlList[url, type of event configured for this callendar,filters]\r\n        const calendarUrlList = [];\r\n        this._config.entities.map((entity) => {\r\n            if (typeof entity.icon != 'undefined') {\r\n                calendarUrlList.push([\r\n                    `calendars/${entity.entity}?start=${start}Z&end=${end}Z`,\r\n                    entity.icon,\r\n                    typeof entity.blacklist != 'undefined' ? entity.blacklist : '',\r\n                    typeof entity.whitelist != 'undefined' ? entity.whitelist : '',\r\n                    typeof entity.color != 'undefined' ? entity.color : this._config.defaultCalColor,\r\n                    typeof entity.startTimeFilter != 'undefined' ? entity.startTimeFilter : '00:00:00',\r\n                    typeof entity.endTimeFilter != 'undefined' ? entity.endTimeFilter : '0:00:00',\r\n                ]);\r\n            }\r\n        });\r\n        Promise.all(calendarUrlList.map((url) => this.hass.callApi('GET', url[0])))\r\n            .then((result) => {\r\n            if (monthToGet == this.monthToGet) {\r\n                result.map((eventsArray, i) => {\r\n                    this.month.map((m) => {\r\n                        const calendarIcon = calendarUrlList[i][1];\r\n                        const calendarUrl = calendarUrlList[i][0];\r\n                        const calendarBlacklist = typeof calendarUrlList[i][2] != 'undefined' ? calendarUrlList[i][2] : '';\r\n                        const calendarWhitelist = typeof calendarUrlList[i][3] != 'undefined' ? calendarUrlList[i][3] : '';\r\n                        const calendarColor = typeof calendarUrlList[i][4] != 'undefined' ? calendarUrlList[i][4] : this._config.defaultCalColor;\r\n                        const filteredEvents = eventsArray.filter((event) => {\r\n                            event['startTime'] = event.start.dateTime\r\n                                ? DateTime.fromISO(event.start.dateTime)\r\n                                : event.start.date\r\n                                    ? DateTime.fromISO(event.start.date).startOf('day')\r\n                                    : DateTime.fromISO(event.start);\r\n                            event['endTime'] = event.end.dateTime\r\n                                ? DateTime.fromISO(event.end.dateTime)\r\n                                : event.end.date\r\n                                    ? DateTime.fromISO(event.end.date).minus({ days: 1 }).endOf('day')\r\n                                    : DateTime.fromISO(event.end);\r\n                            if (!DateTime.fromISO(event.startTime).startOf('day') > DateTime.fromISO(m.date).startOf('day') &&\r\n                                !DateTime.fromISO(event.endTime).startOf('day') < DateTime.fromISO(m.date).startOf('day') &&\r\n                                calendarIcon &&\r\n                                (calendarBlacklist == '' || !this.checkFilter(event.summary, calendarBlacklist)) &&\r\n                                (calendarWhitelist == '' || this.checkFilter(event.summary, calendarWhitelist)) &&\r\n                                (this._config.showPrivate || event.visibility != 'private') &&\r\n                                (this._config.showDeclined || !this.checkDeclined(event))) {\r\n                                return event;\r\n                            }\r\n                        });\r\n                        // Take filtered events and check if they are full day events or not\r\n                        filteredEvents.map((event) => {\r\n                            //1. check if google calendar all day event\r\n                            if (DateTime.fromISO(event.startTime).hasSame(DateTime.fromISO(event.startTime).startOf('day')) &&\r\n                                DateTime.fromISO(event.endTime).hasSame(DateTime.fromISO(event.endTime).endOf('day'))) {\r\n                                event['isFullDayEvent'] = true;\r\n                            }\r\n                            //2. check if CalDav all day event\r\n                            else if (DateTime.fromISO(event.startTime).hours() === 0 &&\r\n                                DateTime.fromISO(event.startTime).hasSame(DateTime.fromISO(event.endTime).minus({ days: 1 })) &&\r\n                                DateTime.fromISO(event.endTime).hours() === 0) {\r\n                                event['isFullDayEvent'] = true;\r\n                            }\r\n                            else {\r\n                                event['isFullDayEvent'] = false;\r\n                            }\r\n                            // Check if the event is finished\r\n                            DateTime.fromISO(event.endTime) < DateTime.now()\r\n                                ? (event['isEventFinished'] = true)\r\n                                : (event['isEventFinished'] = false);\r\n                            try {\r\n                                event['_config'] = {\r\n                                    color: calendarColor,\r\n                                    titleColor: this._config.eventTitleColor,\r\n                                    icon: calendarIcon,\r\n                                };\r\n                                return m['allEvents'].push(event);\r\n                            }\r\n                            catch (e) {\r\n                                console.log(localize('common.version') + ': ', e, calendarUrl);\r\n                            }\r\n                        });\r\n                    });\r\n                    return month;\r\n                });\r\n            }\r\n            if (monthToGet == this.monthToGet)\r\n                this.showLoader = false;\r\n            this.refreshCalEvents = false;\r\n            this.requestUpdate();\r\n        })\r\n            .catch((err) => {\r\n            this.refreshCalEvents = false;\r\n            console.log(localize('common.version') + ': ', err);\r\n            this.showLoader = false;\r\n        });\r\n    }\r\n    /**\r\n     * create array for 42 calendar days\r\n     * showLastCalendarWeek\r\n     */\r\n    buildCalendar(selectedMonth) {\r\n        const firstDay = DateTime.fromISO(selectedMonth).startOf('month');\r\n        const dayOfWeekNumber = firstDay.weekday;\r\n        this.month = [];\r\n        let weekShift = 0;\r\n        dayOfWeekNumber - this._config.firstDayOfWeek >= 0 ? (weekShift = 0) : (weekShift = 7);\r\n        for (let i = this._config.firstDayOfWeek - dayOfWeekNumber - weekShift; i < 42 - dayOfWeekNumber + this._config.firstDayOfWeek - weekShift; i++) {\r\n            const Calendar = new CalendarDay(firstDay.plus({ days: i }), i);\r\n            this.month.push(Calendar);\r\n        }\r\n    }\r\n    /**\r\n     * change month in calendar mode\r\n     *\r\n     */\r\n    handleMonthChange(i) {\r\n        this.selectedMonth = DateTime.fromISO(this.selectedMonth).plus({ months: i });\r\n        this.monthToGet = this.selectedMonth.toFormat('L');\r\n        this.eventSummary = html `&nbsp;`;\r\n        this.refreshCalEvents = true;\r\n    }\r\n    /**\r\n     * show events summary under the calendar\r\n     *\r\n     */\r\n    handleEventSummary(day) {\r\n        this.clickedDate = day.date;\r\n        day._allEvents.sort(function (a, b) {\r\n            const leftStartTime = a.start.dateTime ? DateTime.fromISO(a.start.dateTime) : DateTime.fromISO(a.start.date).startOf('day');\r\n            const rightStartTime = b.start.dateTime ? DateTime.fromISO(b.start.dateTime) : DateTime.fromISO(b.start.date).startOf('day');\r\n            return DateTime.fromISO(leftStartTime).diff(DateTime.fromISO(rightStartTime));\r\n        });\r\n        this.eventSummary = day._allEvents.map((event) => {\r\n            const titleColor = typeof event._config.titleColor != 'undefined' ? event._config.titleColor : this._config.eventTitleColor;\r\n            const calColor = typeof event._config.color != 'undefined' ? event._config.color : this._config.defaultCalColor;\r\n            const finishedEventsStyle = event.isEventFinished && this._config.dimFinishedEvents\r\n                ? `opacity: ` + this._config.finishedEventOpacity + `; filter: ` + this._config.finishedEventFilter + `;`\r\n                : ``;\r\n            // is it a full day event? if so then use border instead of bullet else, use a bullet\r\n            if (event.isFullDayEvent) {\r\n                const bulletType = typeof event.attendees != 'undefined' &&\r\n                    !!event.attendees.find((attendee) => attendee.self == true && attendee.responseStatus == 'declined')\r\n                    ? 'summary-fullday-div-declined'\r\n                    : 'summary-fullday-div-accepted';\r\n                return html `<div class=\"${bulletType}\" style=\"border-color: ${calColor}; ${finishedEventsStyle}\">\n\t\t\t\t\t<div aria-hidden=\"true\">\n\t\t\t\t\t\t<div class=\"bullet-event-span\">${this.getCalTitleHTML(event)} ${this.getCalLocationHTML(event)}</div>\n\t\t\t\t\t\t<div class=\"calMain\">${this._config.calShowDescription ? this.getCalDescHTML(event) : ''}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>`;\r\n            }\r\n            else {\r\n                const StartTime = this._config.showHours ? DateTime.fromISO(event.startTime).toFormat('LT') : '';\r\n                const bulletType = typeof event.attendees != 'undefined' &&\r\n                    !!event.attendees.find((attendee) => attendee.self == true && attendee.responseStatus == 'declined')\r\n                    ? 'bullet-event-div-declined'\r\n                    : 'bullet-event-div-accepted';\r\n                return html `\n\t\t\t\t\t<div class=\"summary-event-div\" style=\"${finishedEventsStyle}\">\n\t\t\t\t\t\t<div class=\"${bulletType}\" style=\"border-color: ${calColor}\"></div>\n\t\t\t\t\t\t<div class=\"bullet-event-span\" style=\"color: ${titleColor};\">\n\t\t\t\t\t\t\t${StartTime} - ${this.getCalTitleHTML(event)} ${this.getCalLocationHTML(event)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"calMain\">${this._config.calShowDescription ? this.getCalDescHTML(event) : ''}</div>\n\t\t\t\t\t</div>\n\t\t\t\t`;\r\n            }\r\n        });\r\n        this.requestUpdate();\r\n    }\r\n    handleCalendarIcons(day) {\r\n        const allIcons = [];\r\n        const myIcons = [];\r\n        day._allEvents.map((event) => {\r\n            if (event._config.icon && event._config.icon.length > 0) {\r\n                const index = myIcons.findIndex((x) => x.icon == event._config.icon);\r\n                if (index === -1) {\r\n                    myIcons.push({ icon: event._config.icon, color: event._config.color });\r\n                }\r\n            }\r\n        });\r\n        myIcons.map((icon) => {\r\n            const dayIcon = html `<span>\n\t\t\t\t<ha-icon class=\"calIcon\" style=\"color: ${icon.color};\" icon=\"${icon.icon}\"></ha-icon>\n\t\t\t</span>`;\r\n            allIcons.push(dayIcon);\r\n        });\r\n        return allIcons;\r\n    }\r\n    /**\r\n     * create html calendar header\r\n     *\r\n     */\r\n    getCalendarHeaderHTML() {\r\n        return html `<div class=\"calDateSelector\">\n\t\t\t<ha-icon-button\n\t\t\t\tclass=\"prev\"\n\t\t\t\ticon=\"mdi:chevron-left\"\n\t\t\t\t@click=\"${() => this.handleMonthChange(-1)}\"\n\t\t\t\ttitle=${this.hass.localize('ui.common.previous')}\n\t\t\t></ha-icon-button>\n\t\t\t<span class=\"date\" style=\"text-decoration: none; color: ${this._config.calDateColor};\">\n\t\t\t\t${DateTime.fromISO(this.selectedMonth).toFormat('MMMM')} ${DateTime.fromISO(this.selectedMonth).toFormat('yyyy')}\n\t\t\t</span>\n\t\t\t<ha-icon-button\n\t\t\t\tclass=\"next\"\n\t\t\t\ticon=\"mdi:chevron-right\"\n\t\t\t\t@click=\"${() => this.handleMonthChange(1)}\"\n\t\t\t\ttitle=${this.hass.localize('ui.common.next')}\n\t\t\t></ha-icon-button>\n\t\t</div>`;\r\n    }\r\n    showCalendarLink() {\r\n        if (!this._config.disableCalLink) {\r\n            return html `<div class=\"calIconSelector\">\n\t\t\t\t<ha-icon-button\n\t\t\t\t\ticon=\"mdi:calendar\"\n\t\t\t\t\tonClick=\"window.open('https://calendar.google.com/calendar/r/month/${DateTime.fromISO(this.selectedMonth).toFormat('yyyy')}/${DateTime.fromISO(this.selectedMonth).toFormat('MM')}/1'), '${this._config.linkTarget}'\"\n\t\t\t\t>\n\t\t\t\t</ha-icon-button>\n\t\t\t</div>`;\r\n        }\r\n    }\r\n    /**\r\n     * create html cells for all days of calendar\r\n     *\r\n     */\r\n    getCalendarDaysHTML(month) {\r\n        let showLastRow = true;\r\n        if (!this._config.showLastCalendarWeek && !DateTime.fromISO(month[35].date).hasSame(DateTime.fromISO(this.selectedMonth), 'month'))\r\n            showLastRow = false;\r\n        return month.map((day, i) => {\r\n            const dayStyleOtherMonth = DateTime.fromISO(day.date).hasSame(DateTime.fromISO(this.selectedMonth), 'month') ? '' : `opacity: .35;`;\r\n            const dayClassToday = DateTime.fromISO(day.date).hasSame(DateTime.now(), 'day') ? `currentDay` : ``;\r\n            const dayStyleSat = DateTime.fromISO(day.date).weekday == 6 ? `background-color: ${this._config.calEventSatColor};` : ``;\r\n            const dayStyleSun = DateTime.fromISO(day.date).weekday == 7 ? `background-color: ${this._config.calEventSunColor};` : ``;\r\n            const dayStyleClicked = DateTime.fromISO(day.date).hasSame(DateTime.fromISO(this.clickedDate), 'day')\r\n                ? `background-color: ${this._config.calActiveEventBackgroundColor};`\r\n                : ``;\r\n            if (i < 35 || showLastRow)\r\n                return html `\n\t\t\t\t\t${i % 7 === 0 ? html `<tr class=\"cal\"></tr>` : ''}\n\t\t\t\t\t<td\n\t\t\t\t\t\t@click=\"${() => this.handleEventSummary(day)}\"\n\t\t\t\t\t\tclass=\"cal\"\n\t\t\t\t\t\tstyle=\"${dayStyleOtherMonth}${dayStyleSat}${dayStyleSun}${dayStyleClicked}\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<div class=\"calDay ${dayClassToday}\">\n\t\t\t\t\t\t\t<div style=\"position: relative; top: 5%;\">${day.date.day}</div>\n\t\t\t\t\t\t\t<div>${this.handleCalendarIcons(day)}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</td>\n\t\t\t\t\t${i && i % 6 === 0 ? html `</tr>` : ''}\n\t\t\t\t`;\r\n        });\r\n    }\r\n    /**\r\n     * update Calendar mode HTML\r\n     *\r\n     */\r\n    updateCalendarHTML() {\r\n        if (this.month.length == 0 ||\r\n            this.refreshCalEvents ||\r\n            DateTime.now().diff(this.lastCalendarUpdateTime, 'minutes') > 120) {\r\n            this.lastCalendarUpdateTime = DateTime.now();\r\n            this.showLoader = true;\r\n            this.buildCalendar(this.selectedMonth);\r\n            this.getCalendarEvents(this.month[0].date, this.month[41].date, this.monthToGet, this.month);\r\n            this.showLoader = false;\r\n            this.hiddenEvents = 0;\r\n        }\r\n        const month = this.month;\r\n        const weekDays = Info.weekdays('short');\r\n        const htmlDayNames = weekDays.map((day) => html ` <th class=\"cal\" style=\"color:  ${this._config.calWeekDayColor};\">${day}</th> `);\r\n        this.content = html `\n\t\t\t<div class=\"calTitleContainer\">${this.getCalendarHeaderHTML()}${this.showCalendarLink()}</div>\n\t\t\t<div class=\"calTableContainer\">\n\t\t\t\t<table class=\"cal\" style=\"color: ${this._config.eventTitleColor};\">\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t${htmlDayNames}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t${this.getCalendarDaysHTML(month)}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t\t<div style=\"font-size: 90%;\">${this.eventSummary}</div>\n\t\t`;\r\n    }\r\n}\r\n__decorate([\r\n    property()\r\n], AtomicCalendarRevive.prototype, \"hass\", void 0);\r\n__decorate([\r\n    property()\r\n], AtomicCalendarRevive.prototype, \"_config\", void 0);\r\n__decorate([\r\n    property()\r\n], AtomicCalendarRevive.prototype, \"content\", void 0);\r\n__decorate([\r\n    property()\r\n], AtomicCalendarRevive.prototype, \"selectedMonth\", void 0);\r\ncustomElements.define('atomic-calendar-revive', AtomicCalendarRevive);\r\n/**\r\n * class for 42 calendar days\r\n *\r\n */\r\nclass CalendarDay {\r\n    constructor(calendarDay, d) {\r\n        this.calendarDay = calendarDay;\r\n        this._lp = d;\r\n        this.ymd = DateTime.fromISO(calendarDay).toFormat('YYYY-MM-DD');\r\n        this._allEvents = [];\r\n        this._daybackground = [];\r\n    }\r\n    get date() {\r\n        return DateTime.fromISO(this.calendarDay);\r\n    }\r\n    get dayNumber() {\r\n        return DateTime.fromISO(this.calendarDay).toFormat('DD');\r\n    }\r\n    get monthNumber() {\r\n        return DateTime.fromISO(this.calendarDay).month;\r\n    }\r\n    set allEvents(events) {\r\n        this._allEvents = events;\r\n    }\r\n    get allEvents() {\r\n        return this._allEvents;\r\n    }\r\n    set daybackground(eventName) {\r\n        this._daybackground = eventName;\r\n    }\r\n    get daybackground() {\r\n        return this._daybackground;\r\n    }\r\n}\r\n/**\r\n * class for Events in events mode\r\n *\r\n */\r\nclass EventClass {\r\n    constructor(eventClass, globalConfig, config) {\r\n        this.eventClass = eventClass;\r\n        this._globalConfig = globalConfig;\r\n        this._config = config;\r\n        this._startTime = this.eventClass.start.dateTime\r\n            ? DateTime.fromISO(this.eventClass.start.dateTime)\r\n            : this.eventClass.start.date\r\n                ? DateTime.fromISO(this.eventClass.start.date).startOf('day')\r\n                : DateTime.fromISO(this.eventClass.start);\r\n        this._endTime = this.eventClass.end.dateTime\r\n            ? DateTime.fromISO(this.eventClass.end.dateTime)\r\n            : this.eventClass.end.date\r\n                ? DateTime.fromISO(this.eventClass.end.date).minus({ days: 1 }).endOf('day')\r\n                : DateTime.fromISO(this.eventClass.end);\r\n        this.isFinished = false;\r\n        this.isEmpty = false;\r\n    }\r\n    get titleColor() {\r\n        if (this._config.eventTitleColor)\r\n            return this._config.eventTitleColor;\r\n        else\r\n            return 'var(--primary-text-color)';\r\n    }\r\n    get title() {\r\n        return this.eventClass.summary;\r\n    }\r\n    get description() {\r\n        return this.eventClass.description;\r\n    }\r\n    //get the start time for an event\r\n    get startTime() {\r\n        if (this._startTime === undefined) {\r\n            const date = (this.eventClass.start && this.eventClass.start.date) ||\r\n                this.eventClass.start.startTime ||\r\n                this.eventClass.start ||\r\n                '';\r\n            this._startTime = DateTime.fromISO(date);\r\n        }\r\n        return this._startTime;\r\n    }\r\n    //start time, returns today if before today\r\n    get startTimeToShow() {\r\n        const time = this.startTime;\r\n        if (DateTime.fromISO(time).startOf('day') < (DateTime.now().startOf('day')) && !(this._globalConfig.startDaysAhead < 0))\r\n            return DateTime.now().startOf('day');\r\n        else\r\n            return time;\r\n    }\r\n    //get the end time for an event\r\n    get endTime() {\r\n        if (this._endTime === undefined) {\r\n            const date = (this.eventClass.end && this.eventClass.end.date) || this.eventClass.end.endTime || this.eventClass.end || '';\r\n            this._endTime = DateTime.fromISO(date);\r\n        }\r\n        return this._endTime;\r\n    }\r\n    get isGoogleCal() {\r\n        try {\r\n            if (this.link.includes('google'))\r\n                return true;\r\n            else\r\n                return false;\r\n        }\r\n        catch (_a) {\r\n            return false;\r\n        }\r\n    }\r\n    // is full day event\r\n    get isFullDayEvent() {\r\n        //1. check if google calendar all day event\r\n        if (DateTime.fromISO(this._startTime).toMillis() === DateTime.fromISO(this._startTime).startOf('day').toMillis() &&\r\n            DateTime.fromISO(this._endTime).toMillis() === DateTime.fromISO(this._endTime).endOf('day').toMillis()) {\r\n            return true;\r\n        }\r\n        //2. check if CalDav all day event\r\n        else if (DateTime.fromISO(this._startTime).hours === 0 &&\r\n            DateTime.fromISO(this._startTime).hasSame(DateTime.fromISO(this._endTime).minus({ days: 1 }), 'day') &&\r\n            DateTime.fromISO(this._endTime).hours === 0)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n    // is full day event, more days\r\n    get isFullMoreDaysEvent() {\r\n        if (this.isFullDayEvent)\r\n            if ((!this._startTime &&\r\n                !this._endTime &&\r\n                !DateTime.fromISO(this._startTime).hasSame(DateTime.fromISO(this._endTime).minus({ days: 1 }), 'day')) ||\r\n                (DateTime.fromISO(this._startTime).toMillis() === DateTime.fromISO(this._startTime).startOf('day').toMillis() &&\r\n                    DateTime.fromISO(this._endTime).toMillis() === DateTime.fromISO(this._endTime).endOf('day').toMillis() &&\r\n                    DateTime.fromISO(this._endTime).startOf('day').minus({ days: 1 }) > DateTime.fromISO(this._startTime).endOf('day')))\r\n                return true;\r\n            else\r\n                return false;\r\n        else\r\n            return false;\r\n    }\r\n    // return YYYYMMDD for sorting\r\n    get daysToSort() {\r\n        return DateTime.fromISO(this.startTimeToShow).toFormat('YYYYMMDD');\r\n    }\r\n    get isEventRunning() {\r\n        return DateTime.fromISO(this.startTime) < DateTime.now() && DateTime.fromISO(this.endTime) > DateTime.now();\r\n    }\r\n    get isEventFinished() {\r\n        return DateTime.fromISO(this.endTime) < DateTime.now();\r\n    }\r\n    get location() {\r\n        return this.eventClass.location ? this.eventClass.location.split(' ').join('+') : '';\r\n    }\r\n    get address() {\r\n        return this.eventClass.location ? this.eventClass.location.split(',')[0] : '';\r\n    }\r\n    get link() {\r\n        return this.eventClass.htmlLink;\r\n    }\r\n    get visibility() {\r\n        return this.eventClass.visibility;\r\n    }\r\n}\r\nwindow.customCards = window.customCards || [];\r\nwindow.customCards.push({\r\n    type: 'atomic-calendar-revive',\r\n    name: 'Atomic Calendar Revive',\r\n    description: localize('common.description'),\r\n});\r\n","references":["/atomic-calendar-revive/node_modules/lit-element/lit-element.d.ts","/atomic-calendar-revive/node_modules/custom-card-helpers/dist/index.d.ts","/atomic-calendar-revive/node_modules/@material/mwc-linear-progress/mwc-linear-progress.d.ts","/atomic-calendar-revive/node_modules/luxon/build/node/luxon.js","/atomic-calendar-revive/node_modules/luxon/src/info.js","/atomic-calendar-revive/src/index-editor.ts","/atomic-calendar-revive/src/types.ts","/atomic-calendar-revive/src/const.ts","/atomic-calendar-revive/src/localize/localize.ts","/atomic-calendar-revive/src/defaults.ts"]}
